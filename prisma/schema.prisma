// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Users {
  id String @id @default(cuid())

  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Profile          Profiles[]
  WorkspaceMembers WorkspaceMembers[]
  TaskAssignees    TaskAssignees[]
  Files            Files[]
  Activities       Activities[]
}

model Profiles {
  id     String @id @default(cuid())
  userId String

  email             String
  username          String?
  name              String
  profilePictureUrl String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  User Users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Workspaces {
  id String @id @default(cuid())

  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Activities       Activities[]
  WorkspaceMembers WorkspaceMembers[]
  Projects         Projects[]
  Files            Files[]
}

model WorkspaceMembers {
  id          String @id @default(cuid())
  userId      String
  workspaceId String

  role      Role
  job       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Workspace Workspaces @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User      Users      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Activities {
  id          String @id @default(cuid())
  workspaceId String
  userId      String

  title       String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User      Users      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Workspace Workspaces @relation(fields: [workspaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Projects {
  id          String @id @default(cuid())
  workspaceId String

  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Workspace Workspaces @relation(fields: [workspaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Tasks     Tasks[]
}

model Tasks {
  id           String  @id @default(cuid())
  projectId    String
  parentTaskId String?

  title       String
  description String?
  stage       stages
  priority    priority
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ParentTask    Tasks?          @relation("ParentTask", fields: [parentTaskId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ChildTasks    Tasks[]         @relation("ParentTask")
  Project       Projects        @relation(fields: [projectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Comments      Comments[]
  TaskAssignees TaskAssignees[]
}

model TaskAssignees {
  id     String @id @default(cuid())
  taskId String
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Task Tasks @relation(fields: [taskId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User Users @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Comments {
  id     String @id @default(cuid())
  taskId String

  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Task Tasks @relation(fields: [taskId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Files {
  id          String @id @default(cuid())
  workspaceId String
  uploaderId  String

  name      String
  path      String
  type      String
  size      Int
  url       String
  relatedId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Workspace Workspaces @relation(fields: [workspaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Uploader  Users      @relation(fields: [uploaderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum Role {
  ADMIN
  MEMBER
}

enum stages {
  BACKLOG
  TODO
  IN_PROGRESS
  READY_FOR_REVIEW
  IN_REVIEW
  DONE
}

enum priority {
  LOW
  MEDIUM
  HIGH
}
